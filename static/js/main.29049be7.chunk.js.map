{"version":3,"sources":["Form.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","noValidate","autoComplete","TextField","required","id","label","type","Button","variant","color","size","onClick","pStyle","textAlign","notifications","display","flexDirection","justifyContent","alignContent","Dashboard","className","AppBar","position","Toolbar","Typography","Card","classname","CardContent","Switch","onChange","onlineChange","name","inputProps","online","CardActions","Slider","value","volume","defaultValue","volumeChange","aria-labelledby","valueLabelDisplay","step","min","max","FormControl","InputLabel","Select","style","width","labelId","qualityChange","quality","MenuItem","JSON","stringify","App","setState","state","event","target","handleLogin","e","preventDefault","loggedIn","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29049be7.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form noValidate autoComplete=\"off\">\r\n            <TextField required id=\"outlined-required\" label=\"Username\" type='text' />\r\n            <br></br>\r\n            <TextField id=\"outlined-required\" required label=\"Password\" type=\"password\" />\r\n            <br></br>\r\n            <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={props.onClick}>Login</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport './App.css';\r\n\r\nconst pStyle = {\r\n  textAlign: \"center\",\r\n}\r\n\r\nconst notifications = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"center\",\r\n  alignContent: \"center\",\r\n}\r\n\r\nfunction Dashboard(props) {\r\n  return (\r\n    <div className=\"Home\">\r\n      <AppBar position=\"static\" color=\"primary\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"white\">\r\n            My Music App\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <h2>Welcome User!</h2>\r\n      <div className=\"cards-group\">\r\n        <Card classname=\"card\" variant=\"outlined\">\r\n            <CardContent>\r\n                <h4>Online Mode</h4>\r\n                <p>Is this application connected to the internet?</p>\r\n                <Switch\r\n                // checked={}\r\n                onChange={props.onlineChange}\r\n                name=\"onlineMode\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                online={props.online}/>\r\n            </CardContent>\r\n            <CardActions>\r\n                {/*controls here. switch, button, etc*/}\r\n            </CardActions>\r\n        </Card>\r\n        <Card classname=\"card\" variant=\"outlined\">\r\n            <CardContent>\r\n                <h4>Master Volume</h4>\r\n                <p>Overrides all other sound settings in this application</p>\r\n                <Slider\r\n                    value={props.volume}\r\n                    defaultValue={20}\r\n                    onChange={props.volumeChange}\r\n                    aria-labelledby=\"discrete-slider\"\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={10}\r\n                    min={0}\r\n                    max={100}\r\n                />\r\n            </CardContent>\r\n            <CardActions>\r\n                {/*controls here. switch, button, etc*/}\r\n            </CardActions>\r\n        </Card>\r\n        <Card classname=\"card\" variant=\"outlined\">\r\n            <CardContent>\r\n                <h4>Sound Quality</h4>\r\n                <p>Manually control the music quality \r\n                        in event of poor connection</p>\r\n                <FormControl>\r\n                    <InputLabel id=\"demo-simple-select-label\">Quality</InputLabel>\r\n                    <Select style={{width: 100}}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    onChange={props.qualityChange}\r\n                    value={props.quality}\r\n                    >\r\n                    <MenuItem value='Low'>Low</MenuItem>\r\n                    <MenuItem value='Normal'>Normal</MenuItem>\r\n                    <MenuItem value='High'>High</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </CardContent>\r\n            <CardActions>\r\n                {/*controls here. switch, button, etc*/}\r\n            </CardActions>\r\n        </Card>\r\n      </div>\r\n        <h3>System Notifications:</h3>\r\n          <div style={notifications}>\r\n          <p style={pStyle}>{props.online === true ? \"Your application is online.\" : \"Your application is offline. You won't be able to share or stream music to other devices.\"}</p>\r\n          <p style={pStyle}>{props.volume < 80 ? `The current volume is set to ${props.volume}.` : `The current volume is set to ${props.volume}. Listening to music at a high volume could cause long-term hearing loss.`}</p>\r\n          <p style={pStyle}>{props.quality === 'Low' ? \"Music quality is degraded. Increase quality if your connection allows it.\" : `The sound is quality is ${JSON.stringify(props.quality)}.`}</p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Form from './Form';\nimport Dashboard from './Dashboard';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      online: false,\n      volume: 20,\n      quality: 'Normal',\n      loggedIn: false,\n\n    }\n  }\n\n  onlineChange = () => {\n    this.setState({\n      online: !this.state.online\n    })\n  }\n\n  volumeChange = (event, value) => this.setState({ volume: value });\n\n  qualityChange = (event) => this.setState({ quality: event.target.value });\n\n  handleLogin = (e) => {\n    e.preventDefault();\n    this.setState({\n      loggedIn: !this.state.loggedIn\n    })\n  }\n  \n  render() {\n    return (\n      !this.state.loggedIn ? (\n      <div className=\"App\">\n        <AppBar position=\"static\" color=\"primary\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"white\">\n              My Music App\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Form onClick={this.handleLogin}/>\n      </div>\n      ) : (\n        <Dashboard onlineChange={this.onlineChange} volumeChange={this.volumeChange} qualityChange={this.qualityChange} online={this.state.online} volume={this.state.volume} quality={this.state.quality}/>\n      )\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}